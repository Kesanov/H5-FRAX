------------------------------------------------------------------------------------------------------------------------------------------------
--MIGHT & MAGIC: HEROES 5.5 - LUA LIBRARY 4.0
------------------------------------------------------------------------------------------------------------------------------------------------

--Authors: RedHeavenHero, Magnomagus

------------------------------------------------------------------------------------------------------------------------------------------------
--TABLES
------------------------------------------------------------------------------------------------------------------------------------------------

_VERSION = "Lua 4.0 modified"

table  = {}
math = {}

string = {
	bytes = {["\0"] = 0, ["\1"] = 1, ["\2"] = 2, ["\3"] = 3, ["\4"] = 4, ["\5"] = 5, ["\6"] = 6, ["\7"] = 7, ["\8"] = 8, ["\9"] = 9, ["\n"] = 10, ["\11"] = 11, ["\12"] = 12, ["\13"] = 13, ["\14"] = 14, ["\15"] = 15, ["\16"] = 16, ["\17"] = 17, ["\18"] = 18, ["\19"] = 19, ["\20"] = 20, ["\21"] = 21, ["\22"] = 22, ["\23"] = 23, ["\24"] = 24, ["\25"] = 25, ["\26"] = 26, ["\27"] = 27, ["\28"] = 28, ["\29"] = 29, ["\30"] = 30, ["\31"] = 31, [" "] = 32, ["!"] = 33, ["\""] = 34, ["#"] = 35, ["$"] = 36, ["%"] = 37, ["&"] = 38, ["'"] = 39, ["("] = 40, [")"] = 41, ["*"] = 42, ["+"] = 43, [","] = 44, ["-"] = 45, ["."] = 46, ["/"] = 47, ["0"] = 48, ["1"] = 49, ["2"] = 50, ["3"] = 51, ["4"] = 52, ["5"] = 53, ["6"] = 54, ["7"] = 55, ["8"] = 56, ["9"] = 57, [":"] = 58, [";"] = 59, ["<"] = 60, ["="] = 61, [">"] = 62, ["?"] = 63, ["@"] = 64, A = 65, B = 66, C = 67, D = 68, E = 69, F = 70, G = 71, H = 72, I = 73, J = 74, K = 75, L = 76, M = 77, N = 78, O = 79, P = 80, Q = 81, R = 82, S = 83, T = 84, U = 85, V = 86, W = 87, X = 88, Y = 89, Z = 90, ["["] = 91, ["\\"] = 92, ["]"] = 93, ["^"] = 94, _ = 95, ["`"] = 96, a = 97, b = 98, c = 99, d = 100, e = 101, f = 102, g = 103, h = 104, i = 105, j = 106, k = 107, l = 108, m = 109, n = 110, o = 111, p = 112, q = 113, r = 114, s = 115, t = 116, u = 117, v = 118, w = 119, x = 120, y = 121, z = 122, ["{"] = 123, ["|"] = 124, ["}"] = 125, ["~"] = 126, ["\127"] = 127, ["\128"] = 128, ["\129"] = 129, ["\130"] = 130, ["\131"] = 131, ["\132"] = 132, ["\133"] = 133, ["\134"] = 134, ["\135"] = 135, ["\136"] = 136, ["\137"] = 137, ["\138"] = 138, ["\139"] = 139, ["\140"] = 140, ["\141"] = 141, ["\142"] = 142, ["\143"] = 143, ["\144"] = 144, ["\145"] = 145, ["\146"] = 146, ["\147"] = 147, ["\148"] = 148, ["\149"] = 149, ["\150"] = 150, ["\151"] = 151, ["\152"] = 152, ["\153"] = 153, ["\154"] = 154, ["\155"] = 155, ["\156"] = 156, ["\157"] = 157, ["\158"] = 158, ["\159"] = 159, ["\160"] = 160, ["\161"] = 161, ["\162"] = 162, ["\163"] = 163, ["\164"] = 164, ["\165"] = 165, ["\166"] = 166, ["\167"] = 167, ["\168"] = 168, ["\169"] = 169, ["\170"] = 170, ["\171"] = 171, ["\172"] = 172, ["\173"] = 173, ["\174"] = 174, ["\175"] = 175, ["\176"] = 176, ["\177"] = 177, ["\178"] = 178, ["\179"] = 179, ["\180"] = 180, ["\181"] = 181, ["\182"] = 182, ["\183"] = 183, ["\184"] = 184, ["\185"] = 185, ["\186"] = 186, ["\187"] = 187, ["\188"] = 188, ["\189"] = 189, ["\190"] = 190, ["\191"] = 191, ["\192"] = 192, ["\193"] = 193, ["\194"] = 194, ["\195"] = 195, ["\196"] = 196, ["\197"] = 197, ["\198"] = 198, ["\199"] = 199, ["\200"] = 200, ["\201"] = 201, ["\202"] = 202, ["\203"] = 203, ["\204"] = 204, ["\205"] = 205, ["\206"] = 206, ["\207"] = 207, ["\208"] = 208, ["\209"] = 209, ["\210"] = 210, ["\211"] = 211, ["\212"] = 212, ["\213"] = 213, ["\214"] = 214, ["\215"] = 215, ["\216"] = 216, ["\217"] = 217, ["\218"] = 218, ["\219"] = 219, ["\220"] = 220, ["\221"] = 221, ["\222"] = 222, ["\223"] = 223, ["\224"] = 224, ["\225"] = 225, ["\226"] = 226, ["\227"] = 227, ["\228"] = 228, ["\229"] = 229, ["\230"] = 230, ["\231"] = 231, ["\232"] = 232, ["\233"] = 233, ["\234"] = 234, ["\235"] = 235, ["\236"] = 236, ["\237"] = 237, ["\238"] = 238, ["\239"] = 239, ["\240"] = 240, ["\241"] = 241, ["\242"] = 242, ["\243"] = 243, ["\244"] = 244, ["\245"] = 245, ["\246"] = 246, ["\247"] = 247, ["\248"] = 248, ["\249"] = 249, ["\250"] = 250, ["\251"] = 251, ["\252"] = 252, ["\253"] = 253, ["\254"] = 254, ["\255"] = 255},
	chars = {"\1", "\2", "\3", "\4", "\5", "\6", "\7", "\8", "\9", "\n", "\11", "\12", "\13", "\14", "\15", "\16", "\17", "\18", "\19", "\20", "\21", "\22", "\23", "\24", "\25", "\26", "\27", "\28", "\29", "\30", "\31", " ", "!", "\"", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "\\", "]", "^", "_", "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "{", "|", "}", "~", "\127", "\128", "\129", "\130", "\131", "\132", "\133", "\134", "\135", "\136", "\137", "\138", "\139", "\140", "\141", "\142", "\143", "\144", "\145", "\146", "\147", "\148", "\149", "\150", "\151", "\152", "\153", "\154", "\155", "\156", "\157", "\158", "\159", "\160", "\161", "\162", "\163", "\164", "\165", "\166", "\167", "\168", "\169", "\170", "\171", "\172", "\173", "\174", "\175", "\176", "\177", "\178", "\179", "\180", "\181", "\182", "\183", "\184", "\185", "\186", "\187", "\188", "\189", "\190", "\191", "\192", "\193", "\194", "\195", "\196", "\197", "\198", "\199", "\200", "\201", "\202", "\203", "\204", "\205", "\206", "\207", "\208", "\209", "\210", "\211", "\212", "\213", "\214", "\215", "\216", "\217", "\218", "\219", "\220", "\221", "\222", "\223", "\224", "\225", "\226", "\227", "\228", "\229", "\230", "\231", "\232", "\233", "\234", "\235", "\236", "\237", "\238", "\239", "\240", "\241", "\242", "\243", "\244", "\245", "\246", "\247", "\248", "\249", "\250", "\251", "\252", "\253", "\254", "\255"; [0] = "\0"},
	saved = {}, savemode = "#*", limit = 1000,
}

string.charclass = {
	complement = {A='a', C='c', D='d', G='g', L='l', P='p', S='s', U='u', W='w', X='x'},
	a = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,0,1,0,0,1,0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
	c = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
	d = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
	g = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
	l = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
	p = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,1,1,1,1,0,1,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
	s = {0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
	u = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
	w = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,0,1,0,0,1,0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
	x = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
}

------------------------------------------------------------------------------------------------------------------------------------------------
--BASIC FUNCTIONS
------------------------------------------------------------------------------------------------------------------------------------------------

do 		--hideerror(hide)
	local ERRORMSG = _ERRORMESSAGE
	function hideerror(hide)
		_ERRORMESSAGE = hide and StopTrigger or %ERRORMSG
	end
end

function table.pack(...)
	return arg
end

function table.unpack(t, i, j)
	i = (i or 1) - 1
	j = j or table.getn(t)
	local n = j-i
	if n <= 0 then
		return
	elseif n == 1 then
		return t[i+1]
	elseif n == 2 then
		return t[i+1],t[i+2]
	elseif n == 3 then
		return t[i+1],t[i+2],t[i+3]
	elseif n == 4 then
		return t[i+1],t[i+2],t[i+3],t[i+4]
	elseif n == 5 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5]
	elseif n == 6 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6]
	elseif n == 7 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7]
	elseif n == 8 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8]
	elseif n == 9 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9]
	elseif n == 10 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10]
	elseif n == 11 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11]
	elseif n == 12 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12]
	elseif n == 13 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13]
	elseif n == 14 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14]
	elseif n == 15 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15]
	elseif n == 16 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16]
	elseif n == 17 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17]
	elseif n == 18 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18]
	elseif n == 19 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19]
	elseif n == 20 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20]
	elseif n == 21 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21]
	elseif n == 22 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22]
	elseif n == 23 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23]
	elseif n == 24 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24]
	elseif n == 25 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25]
	elseif n == 26 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26]
	elseif n == 27 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27]
	elseif n == 28 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28]
	elseif n == 29 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29]
	elseif n == 30 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30]
	elseif n == 31 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31]
	elseif n == 32 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32]
	elseif n == 33 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33]
	elseif n == 34 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34]
	elseif n == 35 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35]
	elseif n == 36 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36]
	elseif n == 37 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37]
	elseif n == 38 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38]
	elseif n == 39 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39]
	elseif n == 40 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40]
	elseif n == 41 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41]
	elseif n == 42 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42]
	elseif n == 43 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43]
	elseif n == 44 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44]
	elseif n == 45 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45]
	elseif n == 46 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46]
	elseif n == 47 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47]
	elseif n == 48 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48]
	elseif n == 49 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49]
	elseif n == 50 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50]
	elseif n == 51 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51]
	elseif n == 52 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52]
	elseif n == 53 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53]
	elseif n == 54 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54]
	elseif n == 55 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55]
	elseif n == 56 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56]
	elseif n == 57 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57]
	elseif n == 58 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58]
	elseif n == 59 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59]
	elseif n == 60 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60]
	elseif n == 61 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61]
	elseif n == 62 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62]
	elseif n == 63 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63]
	elseif n == 64 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64]
	elseif n == 65 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65]
	elseif n == 66 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66]
	elseif n == 67 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67]
	elseif n == 68 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68]
	elseif n == 69 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69]
	elseif n == 70 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70]
	elseif n == 71 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71]
	elseif n == 72 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72]
	elseif n == 73 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73]
	elseif n == 74 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74]
	elseif n == 75 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75]
	elseif n == 76 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76]
	elseif n == 77 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77]
	elseif n == 78 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78]
	elseif n == 79 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79]
	elseif n == 80 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80]
	elseif n == 81 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81]
	elseif n == 82 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82]
	elseif n == 83 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83]
	elseif n == 84 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84]
	elseif n == 85 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85]
	elseif n == 86 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86]
	elseif n == 87 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86],t[i+87]
	elseif n == 88 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86],t[i+87],t[i+88]
	elseif n == 89 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86],t[i+87],t[i+88],t[i+89]
	elseif n == 90 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86],t[i+87],t[i+88],t[i+89],t[i+90]
	elseif n == 91 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86],t[i+87],t[i+88],t[i+89],t[i+90],t[i+91]
	elseif n == 92 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86],t[i+87],t[i+88],t[i+89],t[i+90],t[i+91],t[i+92]
	elseif n == 93 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86],t[i+87],t[i+88],t[i+89],t[i+90],t[i+91],t[i+92],t[i+93]
	elseif n == 94 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86],t[i+87],t[i+88],t[i+89],t[i+90],t[i+91],t[i+92],t[i+93],t[i+94]
	elseif n == 95 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86],t[i+87],t[i+88],t[i+89],t[i+90],t[i+91],t[i+92],t[i+93],t[i+94],t[i+95]
	elseif n == 96 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86],t[i+87],t[i+88],t[i+89],t[i+90],t[i+91],t[i+92],t[i+93],t[i+94],t[i+95],t[i+96]
	elseif n == 97 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86],t[i+87],t[i+88],t[i+89],t[i+90],t[i+91],t[i+92],t[i+93],t[i+94],t[i+95],t[i+96],t[i+97]
	elseif n == 98 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86],t[i+87],t[i+88],t[i+89],t[i+90],t[i+91],t[i+92],t[i+93],t[i+94],t[i+95],t[i+96],t[i+97],t[i+98]
	elseif n == 99 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86],t[i+87],t[i+88],t[i+89],t[i+90],t[i+91],t[i+92],t[i+93],t[i+94],t[i+95],t[i+96],t[i+97],t[i+98],t[i+99]
	elseif n >= 100 then
		return t[i+1],t[i+2],t[i+3],t[i+4],t[i+5],t[i+6],t[i+7],t[i+8],t[i+9],t[i+10],t[i+11],t[i+12],t[i+13],t[i+14],t[i+15],t[i+16],t[i+17],t[i+18],t[i+19],t[i+20],t[i+21],t[i+22],t[i+23],t[i+24],t[i+25],t[i+26],t[i+27],t[i+28],t[i+29],t[i+30],t[i+31],t[i+32],t[i+33],t[i+34],t[i+35],t[i+36],t[i+37],t[i+38],t[i+39],t[i+40],t[i+41],t[i+42],t[i+43],t[i+44],t[i+45],t[i+46],t[i+47],t[i+48],t[i+49],t[i+50],t[i+51],t[i+52],t[i+53],t[i+54],t[i+55],t[i+56],t[i+57],t[i+58],t[i+59],t[i+60],t[i+61],t[i+62],t[i+63],t[i+64],t[i+65],t[i+66],t[i+67],t[i+68],t[i+69],t[i+70],t[i+71],t[i+72],t[i+73],t[i+74],t[i+75],t[i+76],t[i+77],t[i+78],t[i+79],t[i+80],t[i+81],t[i+82],t[i+83],t[i+84],t[i+85],t[i+86],t[i+87],t[i+88],t[i+89],t[i+90],t[i+91],t[i+92],t[i+93],t[i+94],t[i+95],t[i+96],t[i+97],t[i+98],t[i+99],t[i+100]
	end
end

function error(msg)
	_ERRORMESSAGE(msg or "unknown error")
	return -nil
end

function select(index, ...)
	if index == "#" then
		return arg.n
	else
		if index < 0 then
			index = arg.n + index + 1
		end
		return arg[index]
	end
end

function assert(v, msg)
	if not v then
		error(msg or 'assertion failed!')
	end
	return v
end

function next(t, k)
	local find
	for _k, _v in t do
		if not k or find then
			return _k, _v
		elseif _k == k then
			find = 1
		end
	end
	return nil
end

do 		--pcall(func, ...)
	local thread = function(loc, func, arg)
		errorHook(function()
			%loc[1] = 2
		end)
		loc[2] = table.pack(func(table.unpack(arg)))
		loc[1] = 1
	end

	function pcall(func, ...)
		local loc = {0, nil}  -- 0-unknown; 1-success; 2-error
		hideerror(1)
		startThread(%thread, loc, func, arg)
		while loc[1] == 0 do sleep() end
		hideerror(nil)
		return loc[2]
	end
end

function loadstring(chunk, env)
	local func
	if env then
		func = parse([[
		return function(env)
			return function(...)
				]]..chunk..[[
			end
		end
		]])()(env)
	else
		func = parse([[
		return function(...)
			]]..chunk..[[
		end
		]])()
	end
	return func
end

do 		--tonumber(v)
	local tonum = function(v)
		return - -v
	end
	
	function tonumber(v)
		if not v then
			return nil
		end
		local res = pcall(%tonum, v)
		return res and res[1]
	end
end

function tostring(e)
	if not e then
		return 'nil'
	end
	local t = type(e)
	if t == 'string' or t == 'number' then
		return e..""
	else
		return '['..t..']'
	end
end

do 		--type(v)
	local isnumber = function(v, loc)
		if v ~= v.."" then
			loc[1] = "number"
		end
	end
	local isstring = function(v, loc)
		if v == v.."" then
			loc[1] = "string"
		end
	end
	local istable = function(v, loc)
		v = v[1]
		loc[1] = "table"
	end
	local isfunction = function(v, loc)
		errorHook(v)
		loc[1] = "function"
	end
	local thread = function(v, loc)
		startThread(%isnumber, v, loc)
		startThread(%isstring, v, loc)
		startThread(%istable, v, loc)
		startThread(%isfunction, v, loc)
	end
	local multithread = function(k, v, r)
		r[k] = type(v)
	end
	
	function type(v)
		if not v then return "nil" end
		local loc = {nil}
		hideerror(1)
		startThread(%thread, v, loc)
		while not loc[1] do sleep() end
		hideerror(nil)
		return loc[1]
	end

	function types(t)
		local r = {}
		hideerror(1)
		for k,v in t do
			startThread(%multithread, k, v, r)
		end
		while length(r) < length(t) do sleep() end
		hideerror(nil)
		return r
	end
end

function table.insert(t, value, pos)	
	local n = table.getn(t)
	pos = pos or n+1
	t.n = n+1;
	for i=n,pos,-1 do
		t[i+1] = t[i]
	end
	t[pos] = value
end

function table.remove(t, pos)
	local n = table.getn(t)
	if n <= 0 then
		 return
	end
	pos = pos or n
	local value = t[pos]
	for i=pos,n - 1 do
		t[i] = t[i + 1]
	end
	t[n] = nil
	t.n = n - 1
	return value
end

function table.maxn(t)
	local a = 0
	for i,v in t do
		if v and i and i ~= i.."" and i > a then
			a = i
		end
	end
	return a
end

function table.getn(t)
	if t.n then return t.n end
	local a = 0
	while t[a+1] do
		a = a + 1
	end
	return a
end

function table.length(t)
	local a = 0
	for i, v in t do
		a = a + 1
	end
	return a
end

function table.contains(t, s)
	for i,v in t do
		if (v == s) then
			return not nil
		end
	end
	return nil
end

function table.containsamount(t, s)
	local a = 0
	for i, v in t do
		if (v == s) then
			a = a+1
		end
	end
	return a
end

function table.inject(t, s)
	local i = table.length(t)
	t[i] = s
end;

function table.foreach(t, f)
	for i, v in t do
		local res = f(i, v)
		if res then return res end
	end
end

function table.foreachi(t, f)
	for i=1,table.getn(t) do
		local res = f(i, t[i])
		if res then return res end
	end
end

function table.concat(t, sep, str, fin)
	str = (str or 1) - 1
	fin = fin or table.getn(t)
	sep = sep or ''
	local n = fin - str
	if n <= 0 then return "" end
	local r = {}
	while n > 1 do
		n = math.ceil(n/10)
		for i=1,n do
			local x = str + 10*(i-1)
			local a,b,c,d,e,f,g,h,j,k
			local sa,sb,sc,sd,se,sf,sg,sh,sj,sk
			for z=1,10 do
				a = t[x+z]
				if a and x+z <= fin then
					sa = sep
				else
					a, sa = "", ""
				end
				if (not t[x+z+1] or x+z >= fin) and z~=10 then sa='' end
				a,b,c,d,e,f,g,h,j,k = b,c,d,e,f,g,h,j,k,a
				sa,sb,sc,sd,se,sf,sg,sh,sj,sk = sb,sc,sd,se,sf,sg,sh,sj,sk,sa
			end
			r[x+1], r[x+2], r[x+3], r[x+4], r[x+5], r[x+6], r[x+7], r[x+8], r[x+9], r[x+10] = nil
			r[i] = a..sa..b..sb..c..sc..d..sd..e..se..f..sf..g..sg..h..sh..j..sk..k
			if r[i] == "" and sep ~= "" then r[i] = nil end
		end
		t = r
		str = 0
	end
	return (r==t and r[1] or t[str+1]) .. ""
end

function table.copy(t, r)
	r = r or {}
	for k,v in t do
		r[k] = v
	end
	return r
end

do 		--table.sort(t, before, n)
	local env = {}
	env.incs = {n=16; 1391376, 463792, 198768, 86961, 33936, 13776, 4592, 1968, 861, 336, 112, 48, 21, 7, 3, 1}

	function env.lt(a, b)
		return a < b
	end
	
	function env.bg(a, b)
		return a > b
	end

	function env.sort(t, n, before)
		for a=1,%env.incs.n do
			local h = %env.incs[a]
			local i = h + 1
			while i <= n do
				local v = t[i]
				for j = i - h, 1, -h do
					local testval = t[j]
					if not before(v, testval) then break end
					t[i] = testval
					i = j
				end
				t[i] = v
				i = i + 1
			end
		end
		return t
	end

	function table.sort(t, before, n)
		n = n or table.getn(t)
		if not before or before == "<" then before = %env.lt
		elseif before == ">" then before = %env.bg
		end
		%env.sort(t, n, before)
		return t
	end
end

------------------------------------------------------------------------------------------------------------------------------------------------
--MATH
------------------------------------------------------------------------------------------------------------------------------------------------

math.pi = 3.1415926535897932384626433832795
math.huge = 1/0
math.nan = 0/0

function math.abs(n)
	if n < 0 then
		return -n
	else
		return n
	end
end

function math.min(...)
	local min = arg[1]
	for i=2,arg.n do
		if arg[i] < min then
			min = arg[i]
		end
	end
	return min
end

function math.max(...)
	local max = arg[1]
	for i=2,arg.n do
		if arg[i] > max then
			max = arg[i]
		end
	end
	return max
end

function math.fmod(x, y)
	if y == 0 then
		return 0/0
	end
	local z = mod(x, y)
	return z
end

function math.floor(n)
	local rem = mod(n, 1)
	if rem > 0 then
		return n - rem
	elseif n < 0 then
		return n - rem - 1
	end
	return n
end

function math.ceil(n)
	local rem = mod(n, 1)
	if rem > 0 then
		return n - rem + 1
	elseif n < 0 then
		return n - rem
	end
	return n
end

function math.round(n)
	return n>=0 and math.floor(n+0.5) or math.ceil(n-0.5)	
end

function math.frac(n)
	if n < 0 then
		return n-(math.ceil(n))
	else
		return n-(math.floor(n))
	end;
end;

function math.modf(n)
	local int, frc = n - mod(n, 1), mod(n, 1)
	return int, frc
end

function math.pow(n, power)
	if n == 0 and power <= 0 then return 0/0 end
	local m = 1
	for i=1,math.abs(power) do
		m = m * n
	end
	if power < 0 then
		m = 1/m
	end
	return m
end

function math.exp(n)
	local e = 2.7182818284590452353602874713526
	local a = math.pow(e,n)
	return a
end

function math.rad(deg)
	return deg * math.pi / 180
end

function math.deg(rad)
	return rad / math.pi * 180
end

do 		--math.random(n, m)
	local env = {seed = 0}
	local a, c, l = 221, 7759, 65536
	
	function math.random(n, m)
		%env.seed = math.fmod(%env.seed * %a + %c, %l)
		local r = %env.seed / %l
		if n then
			if not m then
				n, m = 1, n
			end
			return n + math.floor(r * (m - n + 1))
		else
			return r
		end
	end
	
	function math.randomseed(seed)
		%env.seed = math.fmod(seed, %l)
	end
end

function math.randomexclude(n,m,e)
	local v = 0
	repeat v = math.random(n,m); until v ~= e
	return v
end

function math.root(a, n)
	if n == 0 then return 0/0 end
	if a == 0 then return 0 end
	if a < 0 then
		return math.fmod(n, 2) == 1 and -math.root(-a, n) or 0/0
	end
	local isnnegative = n < 0
	n = math.abs(n)
	local x0, x1 = 10, 10
	for i=1,100 do
		if math.abs(math.pow(x1, n) - a) < 1e-5 then break end
		x0, x1 = x1, ((n-1) * x0 + a / math.pow(x0, n-1)) / n
	end
	if isnnegative then x1 = 1/x1 end
	return x1
end

function math.fact(n)
	if n == 0 then return 1 end
	for i=n-1,2,-1 do
		n = n * i
	end
	return n
end

function math.cos(rad, prec)
	prec = prec or 9
	local cos, sign = 1, -1
	for i=1, prec do
		cos = cos + sign*math.pow(rad, i*2)/math.fact(i*2)
		sign = -sign
	end
	return cos
end

function math.sin(rad, prec)
	prec = prec or 9
	local sin, sign = rad, -1
	for i=1, prec do
		sin = sin + sign*math.pow(rad, i*2+1)/math.fact(i*2+1)
		sign = -sign
	end
	return sin
end

function math.tan(rad, prec)
	return math.sin(rad, prec) / math.cos(rad, prec)
end

------------------------------------------------------------------------------------------------------------------------------------------------
--STRING MANIPULATION
------------------------------------------------------------------------------------------------------------------------------------------------

function string.clearbuf()
	string.saved = {}
end

function string.spread(s, mode, limit)
	mode, limit = mode or string.mode, limit or string.limit
	local t, st, s = {n = 0}, '', s..''
	if (mode == "#*" or mode == "#+") and string.saved[s] then
		return string.saved[s]
	end
	if s == '' then
		return t
	end
	while t.n < limit do
		local last = "\255"
		local lastsymbol = ""
		local shift = 0
		local base = 256
		for i=1,8 do
			base = base / 2
			local sym = string.chars[shift + base]
			local w = st..sym
			if w < s then
				shift = shift + base
				last = w
				lastsymbol = sym			
			elseif w == s then
				t.n = t.n + 1
				t[t.n] = sym
				if mode == "+" or mode == "#+" then
					string.saved[s] = t
				end
				return t
			end
		end
		t.n = t.n + 1
		t[t.n] = lastsymbol
		st = last
	end
	if mode == "+" or mode == "#+" then
		string.saved[s] = t
	end
	return t
end

function string.len(s)
	return string.spread(s).n
end
	
function string.byte(s, i)
	i = i or 1
	local st = string.spread(s)
	return string.bytes[st[i]]
end

function string.char(arg)
	local res = {}
	local len = table.getn(arg)
	for i=1,len do
		res[i] = string.chars[arg[i]] or ""
	end
	res = table.concat(res, "", 1, len)
	return res
end

function string.parsepattern(pt)
	local t,n={},0
	local poffset = 1
	local CLASSTYPE, CLASS, MIN, MAX, STEP = 1,2,3,4,4
	while 1 do
		local psym = pt[poffset]
		if not psym then
			break
		end
		local psymclass = pt[poffset+1]
		local classtype, class -- "c"(single character) "%"(class) "^"(class complement) ; 'character'/{...}
		if psym == '%' and string.charclass[psymclass] then
			classtype = "%"
			class = string.charclass[psymclass]
		elseif psym == '%' and string.charclass[string.charclass.complement[psymclass]] then
			classtype = "^"
			class = string.charclass[string.charclass.complement[psymclass]]
		elseif psym == "[" then
			class = {}
			local anchor = 0
			if psymclass == "^" then
				classtype = "^"
				anchor = 1
			else
				classtype = "%"
			end
			while 1 do
				anchor = anchor+1
				local sym = pt[poffset+anchor]
				if sym == "%" then
					anchor = anchor+1
					local subclass = pt[poffset+anchor]
					if string.charclass[subclass] then
						for i=1,256 do
							if class[i] ~= 1 then
								class[i] = string.charclass[subclass][i]
							end
						end
					elseif string.charclass[string.charclass.complement[subclass]] then
						local subclass = string.charclass.complement[subclass]
						for i=1,256 do
							if class[i] ~= 1 then
								class[i] = 1 - string.charclass[subclass][i]
							end
						end
					else
						class[string.bytes[subclass]+1] = 1
					end
				elseif sym == "]" then
					break
				elseif pt[poffset+anchor+1] == '-' then
					anchor = anchor+2
					for byte=string.bytes[pt[poffset+anchor-2]]+1,string.bytes[pt[poffset+anchor]]+1 do
						class[byte] = 1
					end
				else
					class[string.bytes[pt[poffset+anchor]]+1] = 1
				end
			end
			poffset = poffset + anchor
		else
			classtype = "c"
			class = psym~="%" and psym or psymclass
		end
		if psym == "%" then -- continue to next
			poffset = poffset + 3
		else
			poffset = poffset + 2
		end
		local mul = pt[poffset-1]
		local min, max = 1, 1
		if mul == "?" then
			min, max = 0, 1
		elseif mul == "*" then
			min, max = 0, 1/0
		elseif mul == "+" then
			min, max = 1, 1/0
		else
			poffset = poffset - 1
		end
		n = n + 1
		t[STEP*(n-1) + CLASSTYPE] = classtype
		t[STEP*(n-1) + CLASS] = class
		t[STEP*(n-1) + MIN] = min
		t[STEP*(n-1) + MAX] = max
	end
	return t, n
end

function string.gsub(s, pattern, repl, n)
	local st = string.spread(s)
	local pt = string.spread(pattern)
	local i = 1
	local res = {n=0}
	n = n or st.n+1
	local m = n
	if pattern == '' then
		for i=1,m do
			local rp
			if n > 0 then
				if repl.f then
					rp = repl.f(pattern, i, i-1)
				end
				if repl.t and not rp then
					rp = repl.t[i]
				end
				if repl.s and not rp then
					rp = repl.s
				end
			end
			table.insert(res, rp or '')
			table.insert(res, st[i] or '')
			if n ~= 0 then n = n - 1 end
		end
		res = table.concat(res)
		return res, m - n
	end
	local pp, ppn = string.parsepattern(pt)
	repeat
		local match = ""
		local matchlen = 0
		local soffset = i
		for k=1,ppn do
			local classtype, class, min, max = pp[4*(k-1)+1], pp[4*(k-1)+2], pp[4*(k-1)+3], pp[4*(k-1)+4]
			local classmatch = ""
			local z = 0
			while 1 do
				local sym = st[soffset+z]
				if not sym or z == max then
					break
				end
				if (classtype == "c" and sym == class) or (classtype == "%" and class[string.bytes[sym]+1] == 1) or (classtype == "^" and class[string.bytes[sym]+1] ~= 1) then
					classmatch = classmatch..sym
					z = z + 1
				else
					break
				end
			end
			soffset = soffset + 1
			if z < min then -- pattern failed
				match = nil
				break
			else
				match = match..classmatch
				matchlen = matchlen + z
				soffset = soffset + z - 1
			end
		end
		if not match then
			table.insert(res, st[i])
			i = i + 1
		else
			local rp
			if repl.f then
				rp = repl.f(match, i, i+matchlen-1)
			end
			if repl.t and not rp then
				rp = repl.t[match]
			end
			if repl.s and not rp then
				rp = repl.s
			end
			table.insert(res, rp or match)
			if rp then
				n = n - 1
			end
			if matchlen == 0 then
				i = i + 1
			else
				i = i + matchlen
			end
		end
	until i > st.n or n <= 0
	if n <= 0 then
		for k=i,st.n do
			table.insert(res, st[k])
		end
	end
	res = table.concat(res)
	return res, m - n
end

function string.gmatch(s, pattern)
	local t = {}
	local repl = {n=0}
	repl.f = function(match)
		%repl.n = %repl.n + 1
		%t[%repl.n] = match
	end
	string.gsub(s, pattern, repl)
	return t
end

function string.sub(s, i, j)
	local st = string.spread(s)
	i = i or 1
	j = j or -1
	if i < 0 then i = st.n + i + 1 end
	if j < 0 then j = st.n + j + 1 end
	local res = table.concat(st, "", i, j)
	return res
end

function string.match(s, pattern, i)
	local st = string.spread(s)
	local pt = string.spread(pattern)
	i = i or 1
	if i < 0 then i = st.n + i + 1 end
	if pattern == '' then
		if i > st.n then i = st.n + 1 end
		return '', i, i-1
	end
	local pp, ppn = string.parsepattern(pt)
	repeat
		local match = ""
		local matchlen = 0
		local soffset = i
		for k=1,ppn do
			local classtype, class, min, max = pp[4*(k-1)+1], pp[4*(k-1)+2], pp[4*(k-1)+3], pp[4*(k-1)+4]
			local classmatch = ""
			local z = 0
			while 1 do
				local sym = st[soffset+z]
				if not sym or z == max then
					break
				end
				if (classtype == "c" and sym == class) or (classtype == "%" and class[string.bytes[sym]+1] == 1) or (classtype == "^" and class[string.bytes[sym]+1] ~= 1) then
					classmatch = classmatch..sym
					z = z + 1
				else
					break
				end
			end
			soffset = soffset + 1
			if z < min then -- pattern failed
				match = nil
				break
			else
				match = match..classmatch
				matchlen = matchlen + z
				soffset = soffset + z - 1
			end
		end
		if not match then
			i = i + 1
		else
			return match, i, i+matchlen-1
		end
	until i > st.n
	return nil
end

------------------------------------------------------------------------------------------------------------------------------------------------
--COMPATIBILITY
------------------------------------------------------------------------------------------------------------------------------------------------

abs = math.abs
length = table.length
contains = table.contains
math.sqrt = sqrt
math.mod = math.fmod
H55_Round = math.round
H55_RoundUp = math.ceil
H55_RoundDown = math.floor
H55_Insert = table.inject
H55_ContainsAmount = table.containsamount

-- ceil = math.ceil
-- floor = math.floor
-- frac = math.frac
-- intg = math.round
-- round = math.round

------------------------------------------------------------------------------------------------------------------------------------------------